#!/usr/bin/env bash

set -Eeuo pipefail


USAGE="add-completion -p path [-d dirpath] [-k] [-f]"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Moves the completion script provided with -p|--path to a directory that's sourced by bash-completion--or to the directory provided with -d|--dir. 

USAGE

    ${USAGE}

OPTIONS

    -p, --path          path to the completion script to add
    -d, --dir           optional, defaults to the value of the "COMPLETION_DIR" env var; path to the directory to which to add the completion script; this should be a directory that's sourced by 
                        bash-completion
    -k, --keep          optional; if present, keeps the original completion script provided via -p|--path
    -f, --force         optional; if present, overwrites any existing completion script in the target dir that collides with the script being added
    --dry-run           optional; if present, no state changes are made
    -v, --verbose       optional; if present, print to stdout messages about the script's progress
    -h, --help          display this message
help
}


COMPLETION_FILE=""
USER_COMPLETION_DIR=""
KEEP=""
FORCE=""
DRY_RUN=""
VERBOSE=""

log() {
    [[ "${VERBOSE}" == "true" ]] && echo "[${1}] ${2}"
    return 0
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--path)
      COMPLETION_FILE="${2}"
      shift
      shift
      ;;
    -d|--dir)
      USER_COMPLETION_DIR="${2}"
      shift
      shift
      ;;
    -k|--keep)
      KEEP="true"
      shift
      ;;
    -f|--force)
      FORCE="true"
      shift
      ;;
    --dry-run)
      DRY_RUN="true"
      shift
      ;;
    -v|--verbose)
      VERBOSE="true"
      shift
      ;;
    -h|--help)
      help
      exit 0
      ;;
    -*)
      usage
      exit 1
      ;;
     *)
      TWO_FA_SRC="${1}"
      shift
      ;;
  esac
done


# validate that a completion script was provided and that it's a valid file
if [[ -z "${COMPLETION_FILE}" ]]; then
    echo "-p|--path is required"
    exit 1
fi

if [[ ! -f "${COMPLETION_FILE}" ]]; then
    echo "-p|--path must refer to a valid file"
    exit 1
fi

# validate that there's some completion dir available
if [[ -z "${USER_COMPLETION_DIR}" ]] && [[ -z "${COMPLETION_DIR+x}" ]]; then
    echo "[ERROR] no value specified for -d|--dir and COMPLETION_DIR env var is unset"
    echo "[ERROR] unable to determine destination for completion file"
    exit 1
elif [[ -z "${USER_COMPLETION_DIR}" ]]; then
    log "INFO" "falling back to completion dir env var='${COMPLETION_DIR}'"
    USER_COMPLETION_DIR="${COMPLETION_DIR}"
fi

if [[ ! -d "${USER_COMPLETION_DIR}" ]]; then
    echo "[ERROR] completion dir is not a valid directory (path='${USER_COMPLETION_DIR}')"
fi

DST_PATH="${USER_COMPLETION_DIR}/$(basename "${COMPLETION_FILE}")"

# fail if the specified completion, unless the caller explicitly asked to overwrite it
if [[ -f "${DST_PATH}" ]] && [[ -z "${FORCE}" ]]; then
    echo "[ERROR] completion file '${DST_PATH}' already exists; exiting"
    exit 1
elif [[ -f "${DST_PATH}" ]]; then
    echo "[WARN] completion file '${DST_PATH}' already exists"
    log "INFO" "-f|--force option detected: the existing file at '${DST_PATH}' will be overwritten"
fi

log "INFO" "copying '${COMPLETION_FILE}' to '${COMPLETION_DIR}'"

[[ -z "${DRY_RUN}" ]] && cp -f ${COMPLETION_FILE} ${USER_COMPLETION_DIR}

# delete the source file, unless the caller explicitly asked to keep it
if [[ -z "${KEEP}" ]]; then
    log "INFO" "removing '${COMPLETION_FILE}'"
    [[ -z "${DRY_RUN}" ]] && rm ${COMPLETION_FILE}
else
    log "INFO" "-k|--keep option detected: preserving '${COMPLETION_FILE}'"
fi

