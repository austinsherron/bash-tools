#!/bin/bash

set -euo pipefail

source "utils.sh"


<< comment
This script has a few outstanding TODOs:

  * just getting it to generally work: it seems to work on the first run of some
    new method (first ./load-secrets, then sh load-secrets), but then stop actually
    putting the env vars into the environment
  * there's a more performant way to do query fields across the same secret, 
    but it's --challenging-- a nightmare to express in bash; try to figure this
    out (probably means moving to another language, then calling from bash to 
    load the env vars) 
  * adding proper logging
  * adding a cronjob to call this regularly

comment


USAGE="load-secrets [-h] [-d] [-s path] [-c path] "

usage() {
    echo "usage: ${USAGE}"
}


function help() {
cat << help
DESCRIPTION

    This script loads secrets, as specified in the file set in \${SECRET_FILE_SRC}, into the 
    environment. If \${SECRET_FILE_SRC} is unset, the default "\${HOME}/.config/secrets" will be
    used. If the relevant file does not exist, this script will exit w/ a 0 return code.

    Secrets in the relevant source file should be of the following form:

        NAME_OF_ENV_VAR_TO_LOAD,1password-secret-id,1password-secret-field

    In the above example, the value of "1password-secret-field" queried from the 
    secret w/ ID = "1password-secret-id" will be loaded into an env var w/ 
    name = "NAME_OF_ENV_VAR_TO_LOAD".

    This script makes use of an md5 checksum to determine if action needs to be taken: if the
    checksum of \${SECRET_FILE_SRC} is unchanged (stored at \${SRC_FILE_CHECKSUM}), the script will 
    exit w/ a 0 return code. If \${SRC_FILE_CHECKSUM} doesn't exist, the script will behave as it
    would have had the checksum failed. By default, the checksum file will live in the same
    directory as the source file and is named ".\$(basename \${SRC_FILE}).md5".

USAGE

    ${USAGE}

OPTIONS

    -h, --help
        Show this help message and exit.

    -o, --out-file
        Path to file that "env var=secret values" will be written. This file 
        should be sourced in order to load variables into the env.

    -s, --source
        Allows caller to directly specify the secrets source file.

    -c, --checksum
        Allows caller to directly specify the secrets checksum file.

Note: This script assumes the following:

  * The 1password CLI executable, op, is installed and in the caller's path
  * API access has been granted in the relevant 1password organization
  * The relevant organization has already been authenticated

help
}


OUT_FILE=""
FORCE=false
SRC_FILE="${SECRET_FILE_SRC:-${HOME}/.config/secrets}" 
SRC_FILE_CHECKSUM="$(dirname ${SRC_FILE})/.$(basename ${SRC_FILE}).md5" 

add_secret_to_env() {
    id="${1}"
    env_name="${2}"
    field_name="${3}"

    value="$(op item get ${id} --fields ${field_name})"

    if [[ -z "${value}" ]]; then
        echo "Unable to retrieve value for ${id}.${field_name}"
        exit 1
    fi

    if [[ -s "$OUT_FILE" ]]; then
        echo "export ${env_name}=\"${value}\"" >> ${OUT_FILE}
    else
        echo "export ${env_name}=\"${value}\""
    fi
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -o|--out-file)
            OUT_FILE=true
            shift
            ;;
        -s|--source)
            SRC_FILE="${2}"
            SRC_FILE_CHECKSUM="$(dirname ${SRC_FILE})/.$(basename ${SRC_FILE}).md5" 
            shift
            shift
            ;;
        -c|--checksum)
            SRC_FILE_CHECKSUM="${2}"
            shift
            shift
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            help
            exit 0
            ;;
        *|-*|--*)
            usage
            exit 1
            ;;
    esac
done
 
## main

# no secrets source; exit
[[ -f ${SRC_FILE} ]] || exit 0

# if force = true, remove the checksum so there's no chance we don't continue
[[ "${FORCE}" = "true" ]] && rm -f ${SRC_FILE_CHECKSUM}
# evaluate checksum file to see if anything's changed since the last run
[[ "$(md5_checksum ${SRC_FILE_CHECKSUM})" -eq 0 ]] && exit 0

# if we're here, we should get rid of the checksum file and re-gen after execution
[[ -f ${SRC_FILE_CHECKSUM} ]] && rm ${SRC_FILE_CHECKSUM}

while IFS="," read -r ID ENV_NAME FIELD_NAME
do
    add_secret_to_env "${ID}" "${ENV_NAME}" "${FIELD_NAME}"
done < ${SRC_FILE}

md5 ${SRC_FILE} > ${SRC_FILE_CHECKSUM}
