#!/usr/bin/env bash

set -Eeuo pipefail


USAGE="pkgmgr -p pkg -m mgr [-c cmd] [-f]"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Central entry point for basic interactions w/ packages via apt, flatpak, and snap package managers. Available commands include:

        * install - maps to install in all three package managers
        * update - maps to: apt "upgrade", flatpak "upgrade", snap "refresh"
        * remove - maps to: apt "remove", flatpak "uninstall", snap "remove"

    Packages are installed only if they aren't already, unless -f|--force is provided. Similarly, packages are only updated/removed if they already exist in the system.

USAGE

    ${USAGE}

OPTIONS

    -p, --pkg           the name of the package to install; arguments/flags to package managers can be provided by providng quoted, multi-token strings
    -m, --mgr           must be one of "apt", "flatpak", or "snap"; the package manager to use
    -c, --cmd           optional, defaults to "install"; must be one of "install", "remove", or "update"; the cmd to run
    -f, --force         optional; if provided, install command will be executed even if package is already installed
    -d, --dry-run       optional; if present, no state changes are made
    -v, --verbose       optional; if present, print to stdout messages about the script's progress
    -h, --help          display this message
help
}

declare -A CMDS=([install]=1 [remove]=1)
declare -A APT=([install]="install" [remove]="remove" [update]="upgrade")
declare -A FP=([install]="install" [remove]="uninstall" [update]="upgrade")
declare -A SNAP=([install]="install" [remove]="remove" [update]="refresh")

PKG=""
MGR=""
CMD="install"
ARGS=()
FORCE=""
DRY_RUN=""
LOG_ARGS="--type pkg"

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--pkg)
      PKG="${2}"
      shift
      shift
      ;;
    -m|--mgr)
      MGR="${2}"
      shift
      shift
      ;;
    -c|--cmd)
      CMD="${2}"
      shift
      shift
      ;;
    -f|--force)
      FORCE="true"
      shift
      ;;
    -d|--dry-run)
      DRY_RUN="true"
      shift
      ;;
    -v|--verbose)
      LOG_ARGS="${LOG_ARGS} -s force"
      shift
      ;;
    -h|--help)
      help
      exit 0
      ;;
     *)
      # usage
      exit 1
      ;;
  esac
done


LOG_ARGS="${LOG_ARGS} -p ${CMD}"

__apt_cmd() {
    local cmd="${APT[${CMD}]}"

    logger -p install -l info "running 'apt ${cmd} ${PKG}'" ${LOG_ARGS} 
    [[ -z "${DRY_RUN}" ]] && sudo apt "${cmd}" "${PKG}" ${ARGS[@]}
}

__flatpak_cmd() {
    local cmd="${FP[${CMD}]}"

    logger -p install -l info "running 'flatpak ${cmd} ${PKG}'" ${LOG_ARGS} 
    [[ -z "${DRY_RUN}" ]] && sudo flatpak "${cmd}" "${PKG}" ${ARGS[@]}
}

__snap_cmd() {
    local cmd="${SNAP[${CMD}]}"

    logger -p install -l info "running 'snap ${cmd} ${PKG} ${ARGS[*]}'" ${LOG_ARGS} 
    [[ -z "${DRY_RUN}" ]] && sudo snap "${cmd}" "${PKG}" ${ARGS[@]} 
}

if [[ -z "${PKG}" ]]; then
    logger -p install -l error "-p|--pkg is required" ${LOG_ARGS}
    exit 1
fi

if [[ -z "${MGR}" ]]; then
    logger -p install -l error "-m|--mgr is required" ${LOG_ARGS}
    exit 1
fi

if [[ -z "${CMDS[${CMD}]+x}" ]]; then
    CMDS_STR="$(echo "${!CMDS[*]}" | tr ' ' '|')"
    logger -p install -l error "-c|--cmd must be one of ${CMDS_STR}" ${LOG_ARGS}
    exit 1
fi

read -r -a PKG_ARR <<< "${PKG}"

if [[ "${#PKG_ARR[@]}" -eq 0 ]]; then
    logger -p install -l info "-p|--pkg is required"
    exit 1
fi

PKG="${PKG_ARR[0]}"
ARGS+=("${PKG_ARR[@]:1}")

{ check-pkg -p "${PKG}" -m "${MGR}" --logger "${LOG_ARGS}"; RC="$?"; } || true

# propagate unexpected error
if [[ ${RC} -eq 2 ]]; then
    exit 1
elif [[ ${RC} -eq 0 ]] && [[ "${CMD}" = "install" ]]; then
    logger -p install -l info "${PKG} is already installed" ${LOG_ARGS}
    [[ -z "${FORCE}" ]] && exit 0
    logger -p install -l info "-f|--force option detected; forcing install" ${LOG_ARGS}
elif [[ ${RC} -eq 0 ]] && [[ "${CMD}" != "install" ]]; then
    logger -p install -l error "cannot ${CMD} package that isn't installed" ${LOG_ARGS}
    exit 1
fi

case "${MGR}" in
    apt)
      __apt_cmd
      ;;
    flatpak)
      __flatpak_cmd
      ;;
    snap)
      __snap_cmd
      ;;
    *)
      logger -p install -l error "-m|--mgr must be one of 'apt|flatpak|snap', not ${MGR}" ${LOG_ARGS}
      exit 1
      ;;
esac

