#!/bin/bash

set -euo pipefail

source "utils.sh"


function help() {
cat << EOF
This script loads secrets, as specified the file set in $SECRET_FILE_SRC, into the 
environment. If $SECRET_FILE_SRC is unset, the default ${HOME}/.config/secrets will be
used. If the relevant file does not exist, this script will exit.

Secrets in the relevant source file should be of the following form:

    NAME_OF_ENV_VAR_TO_LOAD,1password-secret-id,1password-secret-field

In the above example, the value of 1password-secret-field from the secret w/ 
ID = 1password-secret-id will be loaded into bash env var NAME_OF_ENV_VAR_TO_LOAD.

Usage: load-env [--help] 

Note: This script assumes the following:

  * The 1password CLI executable, op, is installed in the caller's path
  * API access has been granted in the relevant 1password organization
  * The relevant organization has already been authenticated
EOF
}


LAST_ITEM=""
ENV_VARS=()
# FIELDS=()
FIELDS=""

# TODO: there's a more performant way to do this, but it's challenging to express in bash
#
add-to-state() {
    id="${1}"
    env_name="${2}"
    field_name="${3}"

    LAST_ITEM="${id}"
    ENV_VARS+=("${env_name}")
    # FIELDS+=(${field_name})
    FIELDS="${FIELDS}$([[ -z "${FIELDS}" ]] && echo "${field_name}" || echo ",${field_name}")"

    echo "Adding to state:"
    echo "  LAST_ITEM=${LAST_ITEM}"
    echo "  ENV_VARS=${ENV_VARS[@]}"
    echo "  FIELDS=${FIELDS[@]}"
}

reset-state() {
    LAST_ITEM=""
    ENV_VARS=()
    FIELDS=""
}

flush-item-to-env() {
    # fields_str=$(join-by "," FIELDS)
    # value_string="$(op item get "${LAST_ITEM}" --fields "${fields_str}")"
    values="$(op item get "${LAST_ITEM}" --fields "${FIELDS}")"

    for i in "${!ENV_VARS[@]}"
    do
        cut_i=$(expr $i + 1)
        value="$(echo ${values} | cut -d, -f${cut_i})"
        echo "export \"${ENV_VARS[i]}\"=\"${value}\""
        # export "${ENV_VARS[i]}"="${values[i]}"
    done

    reset-state
}


if [[ $# > 0 ]]; then
    help
    exit 0
fi

SRC_FILE="${SECRET_FILE_SRC:-${HOME}/.config/secrets}" 
SRC_FILE_CHECKSUM="$(dirname ${SRC_FILE})/.$(basename SRC_FILE)-checksum" 

if [[ ! -f ${SRC_FILE} ]]; then
    exit 0
fi

## main

while IFS="," read -r ID ENV_NAME FIELD_NAME
do
    if [[ -n "${LAST_ITEM}" ]] && [[ "${LAST_ITEM}" != "${ID}" ]]; then
        flush-item-to-env
    fi

    add-to-state "${ID}" "${ENV_NAME}" "${FIELD_NAME}"
done < ${SRC_FILE}

if [[ -z "${LAST_ITEM}" ]]; then
    exit 0
fi

flush-item-to-env
md5 $SRC_FILE > SRC_FILE_CHECKSUM
