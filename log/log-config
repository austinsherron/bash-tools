#!/usr/bin/env bash

set -Eeuo pipefail

source /etc/profile.d/shared_paths.sh
source "${CODE_ROOT}/lib/bash/utils.sh"


declare -A FIELDS=([level]=1 [path]=1 [dir]=1 [root]=1 [type]=1)
declare -A QUERY_TYPES=([default]=1 [user]=1)

function __is_field() {
    local field="${1}"
    [[ -n "${FIELDS[${field}]+x}" ]] && return 0 || return 1
}

function __fields() {
    local sep="${1:-|}"
    join_by "${sep}" ${!FIELDS[@]}
}

function __is_query_type() {
    local query_type="${1}"
    [[ -n "${QUERY_TYPES[${query_type}]+x}" ]] && return 0 || return 1
}

function __query_types() {
    local sep="${1:-|}"
    join_by "${sep}" ${!QUERY_TYPES[@]}
}

USAGE="log-config [-f $(__fields)] [-q $(__query_types)] [-t type] [-c path]"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Reads configuration for ulogger. By default, configuration is sourced from \${XDG_CONFIG_HOME}/ulogger/config.toml, but a path to a config file can be explicitly passed via -c|--config.
    Required configuration values have the following defaults:

        * root = "\${HOME}/.local/state/logs" - can be set via \$LOG_ROOT
        * type.default = "default" - can be set via \$DEFAULT_LOG_TYPE
        * level.current = "WARN" - can be set via \$CURRENT_LOG_LEVEL
        * level.default = "WARN" - can be set via \$DEFAULT_LOG_LEVEL
        * path.default = "default.log" - derived from type.default, if not set

USAGE

    ${USAGE}

OPTIONS

    -f, --field     optional, required if -q|--query isn't specified; the field to read from config; valid values: $(__fields ", ")
    -q, --query     optional, required if -f|--field isn't specified; writes to stdout the config block of the provided type; valid values: $(__query_types ", ")
    -t, --type      optional; the logger type for which config is being read; can also be specified via $\ULOGGER_TYPE
    -c, --config    optional; a path to a file from which to read user ulogger config
    -h, --help      optional; display this message
help
}


FIELD=""
QUERY=""
TYPE=""

CONFIG_PATH="${XDG_CONFIG_HOME}/ulogger/config.toml"
DEFAULT_CONFIG_PATH="${TOOLS_ROOT}/log/config/default.toml"

[[ -n "${ULOGGER_TYPE+x}" ]] && TYPE="${ULOGGER_TYPE}"

while [[ $# -gt 0 ]]; do
  case $1 in
    -f|--field)
      FIELD="${2}"
      shift
      shift
      ;;
    -t|--type)
      TYPE="${2}"
      shift
      shift
      ;;
    -q|--query)
      QUERY="${2}"
      shift
      shift
      ;;
    -c|--config)
      [[ -n "${2}" ]] && CONFIG_PATH="${2}"
      shift
      shift
      ;;
    -h|--help)
      help
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done


function __get_log_level_from_env() {
    if [[ -n "${CURRENT_LOG_LEVEL+x}" ]]; then
        echo "${CURRENT_LOG_LEVEL}"
    elif [[ -n "${DEFAULT_LOG_LEVEL+x}" ]]; then
        echo "${DEFAULT_LOG_LEVEL}"
    else
        echo ""
    fi
}

function __get_default_type_from_env() {
    [[ -n "${DEFAULT_LOG_TYPE+x}" ]] && echo "${DEFAULT_LOG_TYPE}" || echo ""
}

function __get_user_config() {
    tq "${CONFIG_PATH}" -s | jq
}

function __get_default_config() {
    tq "${DEFAULT_CONFIG_PATH}" -s | jq
}

function __get_from_config_file() {
    local path="${1}"
    shift

    local value="$(tq "${path}" $@ -s)"
    [[ "${value}" != "null" ]] && echo "${value}" | xargs || echo ""
}

function __get_from_default_config() {
    local field="${1}"
    __get_from_config_file "${DEFAULT_CONFIG_PATH}" "${field}"
}

function __get_from_user_config() {
    local field="${1}"
    __get_from_config_file "${CONFIG_PATH}" "${field}"
}

function __get_from_config() {
    local field="${1}"
    local value="$(__get_from_user_config "${field}")"

    if [[ -z "${value}" ]]; then
        __get_from_default_config "${field}"
    else
        echo "${value}"
    fi
}

function __log_root() {
    local log_root="$(__get_from_user_config .root)"

    [[ -z "${log_root}" ]] && log_root="$(__get_from_default_config .root)"
    [[ -z "${log_root}" ]] && log_root="${LOG_ROOT:-}"
    [[ -n "${log_root}" ]] && echo "${log_root}" && return 0

    echo "[ERROR] unable to determine log root from config"
    exit 1
}

function __default_type() {
    __get_from_config ".type.default"
}

function __get_log_type() {
    if [[ -n "${TYPE}" ]]; then
        echo "${TYPE}"
        return 0
    fi

    local type="$(__default_type)"
    [[ -z "${type}" ]] && type="$(__get_default_type_from_env)"
    [[ -n "${type}" ]] && echo "${type}" && return 0

    echo "[ERROR] unable to determine logger type from config"
    exit 1
}

function __current_log_level() {
    local type="$(__get_log_type)"
    local level="$(__get_from_user_config .level.overrides."${type}")"

    [[ -z "${level}" ]] && level="$(__get_from_config .level.current)"
    [[ -z "${level}" ]] && level="$(__get_from_config .level.default)"
    [[ -z "${level}" ]] && level="$(__get_log_level_from_env)"
    [[ -n "${level}" ]] && echo "${level}" && return 0

    echo "[ERROR] unable to determine current log level from config"
    exit 1
}

function __get_type_root() {
    __get_from_config ".path.nested.${type}"
}

function __get_type_file() {
    local type="${1}"
    local type_file="$(__get_from_config ".path.${type}")"

    [[ -z "${type_file}" ]] && type_file="${type}.log"
    [[ -n "${type_file}" ]] && echo "${type_file}" && return 0

    echo "[ERROR] unable to determine logger type path from config"
    exit 1
}

function __get_type_dir_path() {
    local type="${1-}"
    local path_parts=()

    [[ -z "${type}" ]] && type="$(__get_log_type)"
    path_parts+=("$(__log_root)")
    path_parts+=("$(__get_type_root "${type}")")

    make_path ${path_parts[@]}
}

function __get_full_type_path() {
    local type="$(__get_log_type)"
    local path_parts=()

    path_parts+=("$(__get_type_dir_path "${type}")")
    path_parts+=("$(__get_type_file "${type}")")

    make_path ${path_parts[@]}
}

function __handle_query() {
    if ! __is_query_type "${QUERY}"; then
        echo "[ERROR] -q|--query must be one of '$(__query_types)', not '${QUERY}'"
        return 1
    fi

    eval "__get_${QUERY}_config" || return 1
}

__get_level() { __current_log_level ; }
__get_path() { __get_full_type_path ; }
__get_dir() { __get_type_dir_path ; }
__get_root() { __log_root ; }
__get_type() { __get_log_type ; }

function __handle_field() {
    if ! __is_field "${FIELD}"; then
        echo "[ERROR] -f|--field must be one of '$(__fields)', not '${FIELD}'"
        return 1
    fi

    eval "__get_${FIELD}" || return 1
}

# dependency validation

if ! which tq &> /dev/null; then
    echo "[ERROR] tq is required for log-config"
    exit 1
fi

# arg validation

if [[ ! -s "${CONFIG_PATH}" ]]; then
    echo "[ERROR] -c|--config must be valid file"
    exit 1
fi

if [[ -n "${QUERY}" ]]; then
    __handle_query || exit 1
elif [[ -n "${FIELD}" ]]; then
    __handle_field || exit 1
else
    echo "[ERROR] one of -f|--field or -q|--query is required"
    exit 1
fi

