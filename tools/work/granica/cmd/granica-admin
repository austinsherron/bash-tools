#!/usr/bin/env bash

set -Eeuo pipefail

export VALIDATE_USE_ULOGGER=""
source "${LOCAL_LIB}/bash/args/check.sh"
source "${LOCAL_LIB}/bash/args/validate.sh"


USAGE="granica admin [cmd] {args} [-e env]|[-s admin-server -p project [-z zone]] [-c config]"

usage() {
    echo "${USAGE}"
}

description() {
    echo "read/write infra autoupdate directives"
}

declare -A EXEC_CMDS=(
    [--]="__exec::custom"
    [dashboard]="__exec::dashboard"
    [deploy]="__exec::deploy"
    [install]="__exec::install"
    [reinstall]="__exec::install"
    [ssh]="__exec::ssh"
)

help() {
cat <<help
DESCRIPTION

    Abstracts away the details of executing commands on a granica cluster, specifically the admin server.

    This script is configured via toml file whose default location is "\${XDG_CONFIG_HOME}/granica/config.toml". Configuration relevant to this script includes blocks of
    the following format:

        [env]
        default = "env_key"

        [env.env_key]
        cloud = "gcp|aws"
        admin_server = "[admin-server-hash]"
        project = "[admin-server-project-id]"
        zone = "[admin-server-zone]"

    "env.default" specifies which environment config block should be used if no flags are provided to this scripts. The config file can specify an arbitrary number of
    "env.[env_key]" blocks that configure specific granica environments.

USAGE

    ${USAGE}

POSITIONAL ARGUMENTS

    CMD                optional; defaults to "ssh"; execute a predefined command, or the command(s) specified after "--"
    ARGS               optional; arguments to "CMD"

OPTIONS

    -e, --env          optional; defaults to config > env.default, if no flags are provided to this script; the key of the environment to access
    -c, --cloud        optional; ignored if -e|--env is provided; the cloud of the environment to access
    -s, --server       optional; ignored if -e|--env is provided; the hash of the admin server to access
    -p, --project      optional; ignored if -e|--env is provided; defaults to the project configured in the relevant cloud provider's cli tool; the project id of the admin server to access
    -z, --zone         optional; ignored if -e|--env is provided; defaults to the zone configured in the relevant cloud provider's cli tool; the zone of the admin server to access
    --config           optional; defaults to "\${XDG_CONFIG_HOME}/granica/config.toml"; a path to the config file to use
    -d|--dry-run       optional; if provided, show the ssh command to run, but don't execute it
    -h, --help         optional; display this message
help
}


validate_installed "granica-ssh" yq gcloud

ENV=""
CLOUD=""
SERVER=""
PROJECT=""
ZONE=""
CONFIG="${XDG_CONFIG_HOME}/granica/config.toml"
DRY_RUN=""

CMD=""
ARGS=()
SSH_CMD=()

function __process_cmd() {
    local arg="${1}"

    if [[ -z "${CMD}" ]]; then
        arg="$(granica config "${arg}" -a admin)"
        validate_one_of "--exec command" "${arg}" "${!EXEC_CMDS[@]}" || return 1
        CMD="${arg}"
    else
        ARGS+=("${arg}")
    fi
}

function __get_from_cloud_config() {
    local name="${1}"

    if [[ "${CLOUD}" == "gcp" ]]; then
        gcloud config get-value "${name}" || echo ""
    elif [[ "${CLOUD}" == "aws" ]]; then
        echo "[ERROR] aws not supported"
        return 1
    else
        echo "[ERROR] unrecognized cloud: ${CLOUD}"
    fi
}

function __set_env_from_config() {
    CLOUD="$(granica-config "env.${ENV}.cloud")"
    SERVER="$(granica-config "env.${ENV}.admin_server")"
    PROJECT="$(granica-config "env.${ENV}.project")"
    ZONE="$(granica-config "env.${ENV}.zone")"
}

function __set_env_vars() {
    if all_empty "${ENV}" "${CLOUD}" "${SERVER}" "${PROJECT}" "${ZONE}"; then
        ENV="$(granica-config env.default)" || return 1
    fi

    if [[ -n "${ENV}" ]]; then __set_env_from_config || return 1 ; fi
    if [[ -z "${PROJECT}" ]]; then PROJECT="$(__get_from_cloud_config "project")" || return 1 ; fi
    if [[ -z "${ZONE}" ]]; then ZONE="$(__get_from_cloud_config "compute/zone")" || return 1 ; fi
}

function __set_ssh_cmd() {
    if [[ "${CLOUD}" == "gcp" ]]; then
        SSH_CMD=("gcloud" "compute" "ssh" "projectn@project-n-admin-server-${SERVER}" "--project=${PROJECT}" "--zone=${ZONE}")
    elif [[ "${CLOUD}" == "aws" ]]; then
        echo "[ERROR] aws not supported"
        return 1
    else
        echo "[ERROR] unrecognized cloud: ${CLOUD}"
        return 1
    fi
}

function __exec::custom() {
    SSH_CMD+=("${ARGS[@]}")
    [[ -n "${DRY_RUN}" ]] && echo "${SSH_CMD[*]}" && return 0
    "${SSH_CMD[@]}" || return 1
}

function __exec::dashboard() {
    SSH_CMD+=("granica" "dashboard")

    if [[ -n "${DRY_RUN}" ]]; then
        echo "${SSH_CMD[*]}"
        return 0
    fi

    OUT=$("${SSH_CMD[@]}") || return 1
    URL="$(echo "${OUT}" | grep "^Open" | sed -r "s/^Open '(.*)'.*/\1/")"
    echo "${OUT}" | grep "^Password:" | sed 's/^Password: //' | pbcopy

    open "${URL}"
}

function __exec::deploy() {
    SSH_CMD+=("granica" "deploy")

    if [[ -n "${DRY_RUN}" ]]; then
        echo "${SSH_CMD[*]}"
        return 0
    fi

    "${SSH_CMD[@]}" || return 1
}

function __exec::install() {
    # NOTE: use CMD here because it'll either be "install" or "reinstall"
    SSH_CMD+=("sudo" "yum" "-y" "${CMD}")
    local args=()

    [[ "${#ARGS[@]}" -gt 0 ]] && args+=("${ARGS[@]}") || args+=("$(pbpaste)")

    if [[ "${#args[@]}" -eq 0 ]]; then
        echo "[ERROR] --exec install requires an rpm to install"
        return 1
    fi

    SSH_CMD+=("${args[@]}")
    [[ -n "${DRY_RUN}" ]] && echo "${SSH_CMD[*]}" && return 0
    "${SSH_CMD[@]}" || return 1
}

function __exec::ssh() {
    if [[ -z "${DRY_RUN}" ]]; then
        "${SSH_CMD[@]}" || return 1
    else
        echo "${SSH_CMD[*]}"
    fi
}

function __exec_cmd() {
    SSH_CMD+=("--")
    "${EXEC_CMDS[${CMD}]}" && return 0 || return 1
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -e|--env) ENV="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -c|--cloud) CLOUD="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -s|--server) SERVER="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -p|--project) PROJECT="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -z|--zone) ZONE="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    --config) CONFIG="${2:-}" ; shift ; shift ;;
    -d|--dry-run) DRY_RUN="true" ; shift ;;
    -h|--help) help && exit 0 ; shift ;;
    --description) description && exit 0 ;;
    -*) echo "error: $(usage)" && exit 1 ;;
    *) __process_cmd "${1}" || exit 1 ; shift ;;
  esac
done


validate_file "${CONFIG}" "-c|--config" || exit 1

__set_env_vars || exit 1

validate_required "-e|--env or -c|--cloud" "${CLOUD}" || exit 1
validate_required "-e|--env or -s|--server" "${SERVER}" || exit 1
validate_required "-e|--env or -p|--project" "${PROJECT}" || exit 1
validate_required "-e|--env or -z|--zone" "${ZONE}" || exit 1

[[ -z "${CMD}" ]] && CMD="ssh"

__set_ssh_cmd || exit 1
__exec_cmd || exit 1

