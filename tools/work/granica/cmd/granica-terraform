#!/usr/bin/env bash

set -Eeuo pipefail

export VALIDATE_USE_ULOGGER=""
source "${LOCAL_LIB}/bash/args/validate.sh"


USAGE="granica-terraform command {args} [-p [plan-file]] {-i init-arg} [--tf-log path] {flags}"

usage() {
    echo "usage: ${USAGE}"
}

description() {
    echo "run terraform commands on configured profiles"
}

help() {
cat <<help
DESCRIPTION

USAGE

    ${USAGE}

POSITIONAL ARGUMENTS

    COMMAND                optional; the terraform command to run
    ARGS                   optional, multi-valued; additional args to pass to the terraform command

OPTIONS

    -p, --profile          the name of a configured terraform profile to use
    --plan-file            optional, defaults to tf.plan; the plan file to use (for terraform plan, apply, show, etc.); using -p|--plan-file w/o a value indicates not to use a plan file
    -i, --init-arg         optional, multi-valued; arguments passed to "terraform init"
    --tf-log               optional, defaults to stdout; a path to a file to which to write

FLAGS

    --skip-init            if specified, skip call to "terraform init"
    --bootstrap            if specified, apply krypton:screen/tf/aws/modules/bootstrap
    -d, --dry-run          if specified, no state changes are made
    -h, --help             display this message

help
}


## constants

REPO_ROOT="$(git rev-parse --show-toplevel)"
AWS_TF_REL_PATH="screen/tf/aws"
TF_ROOT="${REPO_ROOT}/${AWS_TF_REL_PATH}"

## script globals

TF_PROFILE="$(granica-config terraform.default)"
TF_ROOT=""
PLAN_FILE="tf.plan"
TF_OUT="/dev/stdout"

COMMAND=""
ARGS=()
INIT_ARGS=()

SKIP_INIT=""
BOOTSTRAP=""
DRY_RUN=""

## internal helpers

# terraform helpers

function __run_terraform() {
    local cmd="${1}" ; shift
    local dir="${1}" ; shift
    local args=("$@")

    echo "[INFO] running terraform ${COMMAND}"

    if [[ -z "${DRY_RUN}" ]]; then
        terraform -chdir="${dir}" "${cmd}" "${args[@]}" &>> "${TF_OUT}" || return 1
    else
        echo "terraform -chdir=${dir} ${cmd} ${args[*]} &>> ${TF_OUT}" || return 1
    fi
}

function __init() {
    __run_terraform init "${TF_ROOT}" "${INIT_ARGS[@]}"
}

function __bootstrap() {
    BOOTSTRAP_ROOT="${TF_ROOT}/modules/bootstrap"

    __run_terraform init "${BOOTSTRAP_ROOT}" "${INIT_ARGS[@]}" || return 1
    __run_terraform apply "${BOOTSTRAP_ROOT}" "${ARGS[@]}"
}

# validations

function __validate_dependencies() {
    if ! which terraform &> /dev/null; then
        echo "[ERROR] this script requires terraform to be installed"
        return 1
    fi
}

function __validate_tf_profile() {
    validate_required "-p|--profile" "${TF_PROFILE}" || return 1

    local -r krypton_root="$(granica-config repos.krypton)"
    validate_dir "${krypton_root}" "config > repos.krypton" || return 1
    echo "[DEBUG] using krypton repo at ${krypton_root}"

    local profile_selector="terraform.profiles.${TF_PROFILE}"
    local -r profile_root="$(granica-config "${profile_selector}")"
    echo "[DEBUG] using profile root at ${profile_root}"

    TF_ROOT="${krypton_root}/${profile_root}"
    validate_dir "${TF_ROOT}" "TF_ROOT" || return 1
    echo "[INFO] using terraform path ${TF_ROOT}"
}

function __validate_aws_profile() {
    if [[ -z "${AWS_PROFILE+x}" ]]; then
        echo "[ERROR] AWS_PROFILE must be set"
        return 1
    fi
}

# arg parsing helpers

function __handle_plan_file() {
    if [[ "${COMMAND}" == "plan" ]]; then
        echo "[INFO] saving plan to file=${PLAN_FILE}"
        ARGS+=("-out" "${PLAN_FILE}")
    elif [[ "${COMMAND}" == "apply" ]] || [[ "${COMMAND}" == "show" ]]; then
        echo "[INFO] apply plan from file=${PLAN_FILE}"
        ARGS+=("${PLAN_FILE}")
    fi
}

function __process_positional() {
    local arg="${1}"

    if [[ -z "${COMMAND}" ]]; then
        COMMAND="$(granica-config "${arg}" -a terraform)"
    else
        ARGS+=("${arg}")
    fi
}

## arg parsing

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--profile) TF_PROFILE="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    --plan-file) PLAN_FILE="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -i|--init-arg) INIT_ARGS+=("${2:-}") ; [[ -n "${2:-}" ]] && shift ; shift ;;
    --tf-log) TF_OUT="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    --skip-init) SKIP_INIT="true" ; shift ;;
    --bootstrap) BOOTSTRAP="true" ; shift ;;
    -d|--dry-run) DRY_RUN="true" ; shift ;;
    -h|--help) help && exit 0 ;;
    --description) description && exit 0 ;;
    -*) echo "error: $(usage)" && exit 1 ;;
    *) __process_positional "${1}" ; shift
  esac
done


## main

validate_installed "granica-terraform" terraform || exit 1
validate_required "command" "${COMMAND}" || exit 1
__validate_tf_profile || exit 1
__validate_aws_profile || exit 1

if [[ -n "${BOOTSTRAP}" ]]; then
    echo "[INFO] running terraform bootstrapping"
    __bootstrap && exit 0 || exit 1
fi

if [[ -z "${SKIP_INIT}" ]]; then
    __init || exit 1
else
    echo "[INFO] --skip-init detected; skipping 'terraform init'"
fi

if [[ -n "${PLAN_FILE}" ]] && [[ "${COMMAND}" == "plan" ]]; then
    echo "[INFO] using plan file=${PLAN_FILE}"
    ARGS+=("-out" "${PLAN_FILE}")
elif [[ "${COMMAND}" == "plan" ]]; then
    echo "[WARN] no plan file detected; plan won't be saved"
fi

if [[ -n "${TF_OUT}" ]] && [[ "${TF_OUT}" != "/dev/stdout" ]]; then
    echo "[INFO] terraform output will be written to ${TF_OUT}"
fi

__run_terraform "${COMMAND}" "${TF_ROOT}" "${ARGS[@]}"

