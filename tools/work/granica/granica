#!/usr/bin/env bash

set -Eeuo pipefail

source "${BASH_LIB}/args/check.sh"
source "${BASH_LIB}/args/validate.sh"
source "${BASH_LIB}/data.sh"


declare -A CMDS=(
    [autoupdate]="  read/write infra autoupdate directives"
    [ssh]="         ssh into a granica admin server"
    [version]="     query customer version information"
)

function __cmds() {
    local sep="${1:-|}"
    echo "${!CMDS[@]}" | tr " " "${sep}"
}

function __cmd_descriptions() {
    for cmd in "${!CMDS[@]}"; do
        echo "    ${cmd}       ${CMDS[${cmd}]}"
    done
}

USAGE="granica [cmd] {flags}"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Consolidated entry point to granica convenience utilities.

CMDS

$(__cmd_descriptions)

USAGE

    ${USAGE}

ALIASES

    Commands can be aliased by adding a block of following form to the granica config file:

        [alias.command]
        alias_name = "[command-name]"

    More concretely:

        [alias.command]
        au = "autoupdate"
        v = "version"
help
}

ARGS=("$@")
CMD=""
HELP=""
CONFIG="${XDG_CONFIG_HOME}/granica/config.toml"

function __validate_cmd() {
    if is_one_of "${CMD}" "${!CMDS[@]}"; then
        return 0
    fi

    local -r alias="$(yaml::get "${CONFIG}" ".alias.command.${CMD}")"
    validate_one_of "cmd" "${alias}" "${!CMDS[@]}" || return 1
    CMD="${alias}"
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --config) CONFIG="${2:-}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -h|--help) HELP="true" ; shift ;;
    *) [[ -z "${CMD}" ]] && CMD="${1}" ; shift ;;
  esac
done


if [[ -n "${HELP}" ]] && [[ -z "${CMD}" ]]; then
    help && exit 0
fi

validate_file "${CONFIG}" "--config" || exit 1
__validate_cmd || exit 1

ARGS=("${ARGS[@]:1}")
"granica-${CMD}" "${ARGS[@]}"

