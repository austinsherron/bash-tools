#!/usr/bin/env bash

set -Eeuo pipefail

source "${BASH_LIB}/args/validate.sh"
source "${BASH_LIB}/core/str.sh"
source "${BASH_LIB}/log/utils.sh"


USAGE="tmux-resize-layout [-l layout] [-t window] [-s path] {flags}"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Resizes a tmux window's layout based on the window's dimensions, the window's pane count, and the custom layout type in its name or provided via -l, if any.

    Window layout specifications are defined in a space separated file of the following format:

        layout-type window-dimensions pane-count layout-specification pane-dimensions

    Description and formats of the above fields are as follows:

        * window-dimensions: a tmux window height + the string "x" + a tmux window width; for example: 179x98; CAUTION: this value is affected by monitor resolution
        * pane-count: an integer pane count
        * layout-type: a unique key that, when combined w/ window dimensions and pane count, uniquely maps to a layout specification; can contain alphanumeric characters,
          hyphens (-) and underscores (_); whitespace is disallowed; layouts are not required to perform resizing, but are available to constrain the layout chosen for
          resizing
        * layout-specification: a window specification recognized by "tmux select-layout"; see "man tmux" for details
        * pane-dimensions: a comma separated list of dimensions of panes in the layout, i.e.: 319x88,79x88

    The default location for window layout specifications is "\${XDG_CONFIG_HOME}/tmux/layouts", or they can be passed via -s.

    This script can be run in either default or "strict" mode. In default mode, all errors are silently ignored, resulting no action. Strict mode introduces the following
    error cases, which, when triggered, result in non-zero return codes:

        * No valid layout specification file
        * No layout specification found for the combination of window-dimensions, pane-count, and, optionally, layout-type
        * Multiple layout specifications found for the combination of window-dimensions, pane-count, and, optionally, layout-type (if using default mode, the first layout
          spec will be used)

    Note: this script is intended to run as a tmux hook on the "client-resized" event.

USAGE

    ${USAGE}

OPTIONS

    -l, --layout        optional; if not provided, will pull value from window name if in the format  ".* \(layout-type\)"; the layout to use
    -t, --target        optional, defaults to the active window; the name of the window for which to set a layout
    -s, --specs         optional, default to "\${XDG_CONFIG_HOME}/tmux/layouts"; a file that contains layout specifications in the format describe about

FLAGS

    --strict            can't be used w/ --dry-run; if specified, error cases will case the script to exit with non-zero return codes; see above for specific
                        behavioral description
    --force             if specified, forces resize even if pane dimensions match those in the layout spec
    --dry-run           can't be used w/ --force; indicates that the script should print hypothetical results to the console, but make no state changes
    -h, --help          display this message
help
}


LAYOUT=""
TARGET="$(tmux display-message -p "#W")"
SPEC_PATH="${HOME}/.config/tmux/layouts"
STRICT=""
FORCE=""
DRY_RUN=""

[[ -z "${ULOGGER_TYPE+x}" ]] && export ULOGGER_TYPE="tmux"
[[ -z "${ULOGGER_PREFIX+x}" ]] && export ULOGGER_PREFIX="resize"

log() {
    ulogger info "${1}" || echo -n ""
}

log_and_exit() {
    local msg="${1}"; shift

    if [[ "${STRICT}" == "true" ]]; then
        ulogger error "${msg}; exiting" "$@"
        exit 1
    else
        ulogger warn "${msg}; exiting" "$@"
        exit 0
    fi
}

log_or_exit() {
    local msg="${1}" ; shift

    if [[ -n "${STRICT}" ]]; then
        log_and_exit "${msg}" "$@"
    else
        ulogger warn "${msg}" "$@"
    fi
}

extract_layout_from_name() {
    # FIXME: the pattern used to extract the layout-type from window name should not allow whitespace
    #        characters, and should probably be restricted to alphanumeric and hyphens + underscores;
    #        I couldn't for the life of me get that pattern to work
    [[ "${TARGET}" =~ .*[[:space:]]\((.*)\)$ ]] && echo "${BASH_REMATCH[1]}" || echo ""
}

extract_layout_from_env() {
    local -r env_var="TMUX_$(str::upper "${TARGET}_LAYOUT")"
    local -r env_val="$(tmux show-environment "${env_var}" 2> /dev/null || echo "")"

    echo "${env_val}" | cut -d "=" -f2
}

LogFlags::process_log_flags "$@"

while [[ $# -gt 0 ]]; do
  case $1 in
    -l|--layout)
      [[ -n "${2:-}" ]] && LAYOUT="${2}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -t|--target)
      [[ -n "${2:-}" ]] && TARGET="${2}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    -s|--specs)
      [[ -n "${2:-}" ]] && SPEC_PATH="${2}" ; [[ -n "${2:-}" ]] && shift ; shift ;;
    --strict)
      STRICT="true" ; shift ;;
    --force)
      FORCE="true" ; shift ;;
    -v*|-q*)
      shift ;;
    --dry-run)
      DRY_RUN="true" ; shift ;;
    -h|--help)
      help && exit 0 ;;
    *)
      ulogger error "$(usage)" && exit 1 ;;
  esac
done


validate_mutually_exclusive "${DRY_RUN}" "--dry-run" "${FORCE}" "--force" || exit 1

# validate target refers to a window
if [[ -z "$(tmux list-windows -F "#W" | grep "${TARGET}" || true)" ]]; then
    log_and_exit "tmux window target='${TARGET}' does not exist"
fi

# get window id
MATCHING_TARGETS="$(tmux list-windows -F "#I #W" | grep "${TARGET}"| cut -d ' ' -f1)"
TARGET_ID="$(echo "${MATCHING_TARGETS}" | head -1)"

# ensure that we have only one match for the provided target; if the original match is
# different from the matching targets, we know we originally found > 1 match
if [[ "${MATCHING_TARGETS}" != "${TARGET_ID}" ]]; then
    TARGET_IDS="$(echo "${MATCHING_TARGETS}" | tr '\n' ',')"
    TARGET_IDS="${TARGET_IDS:0:-1}"
    MSG="multiple windows found for target='${TARGET}' (ids: ${TARGET_IDS})"
    # exit only if using strict mode (that's why we're not just using log_and_exit here)
    log_or_exit "${MSG}"
fi

ulogger info "preparing to set layout for target window='${TARGET}' (id: ${TARGET_ID})"

# if layout-type isn't provided, try to extract it from window name
[[ -z "${LAYOUT}" ]] && LAYOUT="$(extract_layout_from_name)"

if [[ -n "${LAYOUT}" ]]; then
    ulogger info "no layout provided; extracted layout='${LAYOUT}' from window name='${TARGET}'"
else
    LAYOUT="$(extract_layout_from_env)"
    [[ -n "${LAYOUT}" ]] && ulogger info "no layout provided; extracted layout='${LAYOUT}' from tmux env"
fi

[[ -z "${LAYOUT}" ]] && ulogger info "no layout provided; unable to extract layout"
validate_file "${SPEC_PATH}" "-s|--specs" || exit 1

# build layout identifier from window dimensions, pane count, and, optionally, the identifier
DIMENSIONS="$(tmux display-message -t "${TARGET_ID}" -p "#{window_width}x#{window_height}")"
PANE_COUNT="$(tmux list-panes -t "${TARGET_ID}"  | wc -l | xargs)"
# if present, add extra space to layout to make below identifier work in grep pattern
LAYOUT="$([[ -z ${LAYOUT} ]] && echo "" || echo "${LAYOUT} ")"
IDENTIFIER="${LAYOUT}${DIMENSIONS} ${PANE_COUNT}"

ulogger info "searching for layout specification with identifier='${IDENTIFIER}'"

# filter out comments before grepping for identifier
readarray -t SPEC_MATCHES < <(grep -v "^#" "${SPEC_PATH}" | grep "${IDENTIFIER}")
if [[ "${#SPEC_MATCHES[@]}" -eq 0 ]]; then
    log_and_exit "no layout specification found for '${IDENTIFIER}'"
fi

ulogger info "found spec match(es):"
for SPEC_MATCH in "${SPEC_MATCHES[@]}"; do
    ulogger info "  - ${SPEC_MATCH}" -n
done

# ensure that we have only one match for the current identifier; if the original match is
# different from this "single match", we know we originally found > 1 match
if [[ "${#SPEC_MATCHES[@]}" -gt 1 ]]; then
    log_or_exit "multiple layout specifications found for '${IDENTIFIER}'"
fi

SPEC_MATCH="${SPEC_MATCHES[0]}"
ulogger info "extracting layout specification from match='${SPEC_MATCH}'"

# extract get the tmux layout from the spec
LAYOUT_SPEC="$(echo "${SPEC_MATCH}" | cut -d " " -f4)"
if [[ -z "${LAYOUT_SPEC}" ]]; then
    log_and_exit "unable to extract layout specification from spec match='${SPEC_MATCH}'"
fi

ulogger info "using extracted layout specification='${LAYOUT_SPEC}'"

# check the current pane dimensions against those in the layout
CURRENT_PANES="$(tmux list-panes -t "${TARGET_ID}" -F "#{pane_width}x#{pane_height}" | tr '\n' ',')"
CURRENT_PANES="${CURRENT_PANES:0:-1}"
LAYOUT_PANES="$(echo "${SPEC_MATCH}" | cut -d " " -f5)"

ulogger info "target panes=\"${CURRENT_PANES}\"; layout panes=\"${LAYOUT_PANES}\""

# if they match, don't do anything
if [[ "${CURRENT_PANES}" == "${LAYOUT_PANES}" ]] && [[ "${FORCE}" != "true" ]]; then
    ulogger info "target panes match layout panes; exiting"
    exit 0
elif [[ "${FORCE}" == "true" ]]; then
    ulogger info "target panes match layout panes but --force option detected; continuing"
fi

if [[ "${DRY_RUN}" == "true" ]]; then
    echo "tmux select-layout -t ${TARGET} ${LAYOUT_SPEC}"
    exit 0
fi

# the lack of quotes around ${LAYOUT_SPEC} is intentional
tmux select-layout -t "${TARGET}" "${LAYOUT_SPEC}"

