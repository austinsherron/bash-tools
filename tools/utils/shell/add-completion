#!/usr/bin/env bash

set -Eeuo pipefail

source "${BASH_LIB}/args/validate.sh"
source "${BASH_LIB}/log/utils.sh"
source "${BASH_LIB}/utils/file.sh"


USAGE="add-completion completions [-d dir] {flags}"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Add a completion script provided with to a directory that's sourced by bash-completion--or to the directory provided with -d|--dir. The contents of the completion script
    can be provided via a positional file path argument, or they can be read from stdin: if the provided file/path doesn't exist, it's assumed that completion file contents
    are coming from stdin.

USAGE

    ${USAGE}

POSITIONAL ARGUMENTS

    COMPLETIONS         a path to the completion script to add, or the name to use for the file into which stdin will be read

OPTIONS

    -d, --dir           optional, defaults to the value of the "COMPLETION_DIR" env var; path to the directory to which to add the completion script; this should be a
                        directory that's sourced by bash-completion

FLAGS

    -k, --keep          if present, keeps the original completion script provided via COMPLETIONS; only relevant if completions are provided via file path
    -f, --force         if present, overwrites any existing completion script in the target dir that collides with the script being added
    --dry-run           if present, no state changes are made
    -v, --verbose       if present, print to stdout messages about the script's progress
    -h, --help          display this message
help
}


COMPLETION_FILE=""
USER_COMPLETION_DIR=""
KEEP=""
FORCE=""
DRY_RUN=""

[[ -z "${ULOGGER_TYPE+x}" ]] && export ULOGGER_TYPE="shell"
export ULOGGER_PREFIX="cmp"

LogFlags::process_log_flags "$@"

while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--dir)
      USER_COMPLETION_DIR="${2}" ; shift ; shift ;;
    -k|--keep)
      KEEP="true" ; shift ;;
    -f|--force)
      FORCE="true" ; shift ;;
    --dry-run)
      DRY_RUN="true" ; shift ;;
    -v*|-q*)
      shift ;;
    -h|--help)
      help && exit 0 ;;
    -*)
      echo "error: $(usage)" && exit 1 ;;
    *)
      COMPLETION_FILE="${1}" ; shift ;;
  esac
done


# if the provided completions file doesn't exist, it's assumed it's a filename for content
# that's coming from stdin
if [[ ! -f "${COMPLETION_FILE}" ]]; then
    ulogger info "reading stdin to ${COMPLETION_FILE}"

    COMPLETION_FILE="$(mktemp -d)/${COMPLETION_FILE}"
    ulogger debug "reading stdin to ${COMPLETION_FILE}"

    file::read "${COMPLETION_FILE}" &> /dev/null
else
    COMPLETION_FILE="$(realpath "${COMPLETION_FILE}")"
fi

echo "here"

# validate that a completion script was provided and that it's a valid file
validate_file "${COMPLETION_FILE}" "completions" || exit 1

# validate that there's some completion dir available
if [[ -z "${USER_COMPLETION_DIR}" ]] && [[ -z "${COMPLETION_DIR+x}" ]]; then
    ulogger error "no value specified for -d|--dir and COMPLETION_DIR env var is unset"
    ulogger error "unable to determine destination for completion file"
    exit 1
elif [[ -z "${USER_COMPLETION_DIR}" ]]; then
    ulogger info "falling back to completion dir env var='${COMPLETION_DIR}'"
    USER_COMPLETION_DIR="${COMPLETION_DIR}"
fi

validate_dir "${USER_COMPLETION_DIR}" "" "completion dir is not a valid directory (path='${USER_COMPLETION_DIR}')" || exit 1
DST_PATH="${USER_COMPLETION_DIR}/$(basename "${COMPLETION_FILE}")"

# fail if the specified completion exists, unless the caller explicitly asked to overwrite it
if [[ -f "${DST_PATH}" ]] && [[ -z "${FORCE}" ]]; then
    ulogger error "completion file '${DST_PATH}' already exists; exiting"
    exit 1
elif [[ -f "${DST_PATH}" ]]; then
    ulogger warn "completion file '${DST_PATH}' already exists"
    ulogger info "-f|--force option detected: the existing file at '${DST_PATH}' will be overwritten"
fi

ulogger info "copying '${COMPLETION_FILE}' to '${COMPLETION_DIR}'"

if [[ -z "${DRY_RUN}" ]]; then
    cp -f "${COMPLETION_FILE}" "${USER_COMPLETION_DIR}"
    chmod +x "${USER_COMPLETION_DIR}/$(basename "${COMPLETION_FILE}")"
fi

# delete the source file, unless the caller explicitly asked to keep it
if [[ -z "${KEEP}" ]]; then
    ulogger info "removing '${COMPLETION_FILE}'"
    [[ -z "${DRY_RUN}" ]] && rm "${COMPLETION_FILE}"
else
    ulogger info "-k|--keep option detected: preserving '${COMPLETION_FILE}'"
fi

