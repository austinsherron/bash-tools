#!/usr/bin/env bash

set -Eeuo pipefail


if [[ -n "$(log-env -r disabled -v)" ]] || [[ -n "$(log-config -f disabled)" ]]; then
    exit 0
fi

source "${LOCAL_LIB}/bash/args/check.sh"
source "${LOCAL_LIB}/bash/args/parse.sh"
source "${LOCAL_LIB}/bash/log/level.sh"


declare -A CMDS=(
    # core
    [write]="    actually write log messages to files and stdout"
    [level]="    validate and test log levels"
    # config
    [config]="   read user and default logger configuration"
    [configure]="open user logger config in an editor"
    [env]="      manipulate ulogger environment variables"
    # inspection
    [list]="     show list of known log files"
    [tree]="     show tree of known log files"
    # editing
    [explore]="  open logs of a specific type in an editor"
    [edit]="     alias for explore"
)

function __cmds() {
    local sep="${1:-|}"
    echo "${!CMDS[@]}" | tr " " "${sep}"
}

function __cmd_descriptions() {
    # shellcheck disable=SC2207
    IFS=$'\n' sorted_cmds=($(sort <<<"${!CMDS[*]}")) ; unset IFS

    for cmd in "${sorted_cmds[@]}"; do
        echo "    ${cmd}       ${CMDS[${cmd}]}"
    done
}

USAGE="ulogger [cmd] {flags}"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Consolidated entry point to ulogger related functionality.

CMDS

$(__cmd_descriptions)

USAGE

    ${USAGE}
help
}

CMD="write"

function log::config() { log-config "$@" ; }
function log::configure() { log-config -e ; }
function log::level() { log-level "$@" ; }
function log::write() { log-write "$@" ; }
function log::list() { log-explore -l ; }
function log::tree() { log-explore -t ; }
function log::edit() { log-explore "$@" ; }
function log::explore() { log-explore ; }
function log::env() { log-env "$@" ; }

FIRST="$(log-config -f "${1:-}" -a command)"

if parse::is_help_flag "${FIRST}"; then
    help && exit 0
fi

if is_one_of "${FIRST}" "${!CMDS[@]}"; then
    CMD="${FIRST}" ; shift
elif [[ -n "${FIRST}" ]] &&  ! LogLevel::is_public "${FIRST}"; then
    echo "[ERROR] unrecognized command: ${FIRST}"
    exit 1
fi

"log::${CMD}" "$@"

