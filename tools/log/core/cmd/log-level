#!/usr/bin/env bash

set -Eeuo pipefail

export VALIDATE_USE_ULOGGER=""
source "${BASH_LIB}/args/check.sh"
source "${BASH_LIB}/args/validate.sh"
source "${BASH_LIB}/core/num.sh"
source "${BASH_LIB}/log/level.sh"
source "${BASH_LIB}/utils.sh"


USAGE="log-level LOG_LEVEL [-v] [-t type] [-c path]"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Provides the following functions:

        * -v|--validate validates the provided level and tests its severity against the current log level to determine if a log message needs to be written to stdout
        * --convert converts the provided log level (or the current level, if none is provided) to a numeric severity, or vice versa if a numeric severity is provided
        * -[{-}|1-5]|+[{+}|1-5] converts the provided log level (or the current level, if none is provided) to the level that is n level more (if "+" is used) or less
          (if "-" is used) severe

    Log levels indicate the severity/urgency of a log message, and determine which messages should be propagated to callers. For example, if the current log level is WARN,
    only messages w/ a log level >= WARN (i.e.: WARN, ERROR) will propagate to callers.

    Valid log levels include (in order from least to most severe):

        * TRACE
        * DEBUG
        * INFO
        * WARN
        * ERROR

    Additionally, the current/default log level may be set to "OFF" (though logger callers cannot pass that level).

    Return codes (w/o -v|--validate):

        0 - the provided log level's severity indicates that a message should propagate to stdout
        1 - the provided log level's severity indicates that a message should not propagate to stdout
        2 - the provided log level or some global log level configuration (i.e.: CURRENT_LOG_LEVEL, DEFAULT_LOG_LEVEL) is invalid

    Return codes (w/ -v|--validate):

        0 - the provided log level is valid
        1 - the provided log level is not valid

USAGE

    ${USAGE}

POSITIONAL ARGUMENTS

    LOG_LEVEL/SEVERITY          the log level to validate and test against the current log level

OPTIONS

    -v, --validate              optional; if specified, exit after validating the provided log level
    -t, --type                  optional; the active logger type, which affects log levels and files; can also be specified via $\ULOGGER_TYPE
    --convert                   optional; if specified, converts the provided log level -> numeric severity, or severity -> log level
    -c, --config                optional; a path to a file from which to read user ulogger config
    +*, +[1-5]                  optional; if specified, uses for comparisons the log level that is n levels more severe than the provided level (or the current level, if none is
                                provided), where n is the # of "+" characters or the number after a single "+" character
    -*, -[1-5]                  optional; if specified, uses for comparisons the log level that is n levels less severe than the provided level (or the current level, if none is
                                provided), where n is the # of "-" characters or the number after a single "-" character
    -h, --help                  optional; display this message
help
}


LOG_LEVEL=""
VALIDATE=""
CONVERT=""
CONFIG_PATH=""
XFM=""
ERROR_RC=2

function __extract_xfm() {
    local xfm="${1}"

    if [[ "${xfm}" =~ ^(([\+\-])([\+\-]){0,4})$ ]]; then
        XFM="${BASH_REMATCH[2]}${#xfm}"
    elif [[ "${xfm}" =~ ^(([\+\-])([1-5])+)$ ]]; then
        XFM="${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
    else
        echo "[ERROR] invalid log level transform: (${xfm})"
        return 1
    fi
}

function __process_xfm() {
    local -r current="$(LogLevel::to_severity "${LOG_LEVEL}")"
    local xfmed="$(($current"${XFM}"))"
    local -r level="$(num::bounded $xfmed 0 4)"

    LOG_LEVEL="$(LogLevel::to_level "${level}")" || return 1
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -v|--validate) VALIDATE="true" ; ERROR_RC=1 ; shift ;;
    -t|--type) export ULOGGER_TYPE="${2}" ; shift ; shift ;;
    --convert) CONVERT="true" ; shift ;;
    -c|--config) CONFIG_PATH="${2}" ; shift ; shift ;;
    -h|--help) help ; exit 0 ;;
    +*) __extract_xfm "${1}" || exit 1 ; shift ;;
    -*) __extract_xfm "${1}" || exit 1 ; shift ;;
    *) LOG_LEVEL="${1}" ; shift ;;
  esac
done


[[ -n "${ULOGGER_LEVEL_XFM+x}" ]] && XFM="${ULOGGER_LEVEL_XFM}"

# arg validation

validate_required_positional "log level" "${LOG_LEVEL}" || exit $ERROR_RC

# convert, if necessary

if [[ -n "${CONVERT}" ]]; then
    LogLevel::convert "${LOG_LEVEL}" && exit 0 || exit 1
fi

# validation, continued

LogLevel::validate_public "${LOG_LEVEL}" || exit $ERROR_RC

# if -v|--validate is specified, exit after validating the provided log level
[[ "${VALIDATE}" == "true" ]] && exit 0

# config validation

CURRENT_LOG_LEVEL="$(log-config -f level -c "${CONFIG_PATH}")"

validate_required "" "${CURRENT_LOG_LEVEL}" "unable to determine current log level" || exit $ERROR_RC
LogLevel::validate "${CURRENT_LOG_LEVEL}" || exit $ERROR_RC

# transform provided level before comparison, if necessary
[[ -n "${XFM}" ]] && __process_xfm

# check if the provided level is high enough severity to log to stdout
LogLevel::should_log "${LOG_LEVEL}" "${CURRENT_LOG_LEVEL}"

