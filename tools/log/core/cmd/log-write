#!/usr/bin/env bash

set -Eeuo pipefail

source "${BASH_LIB}/core/str.sh"
source "${BASH_LIB}/utils.sh"
source "${BASH_LIB}/utils/file.sh"


declare -A STRATEGIES=(
    [NORMAL]="the default strategy; lines are written to relevant log files, but are only logged to stdout if the provided log level is >= the current log level"
    [NOTIFY]="lines are only written to stdout, regardless of log level"
    [LOG]="   lines are only written to relevant log files"
    [FORCE]=" lines are written to log files and stdout, regardless of the provided/current log levels"
)

function strategies() {
    join_by "|" "${!STRATEGIES[@]}"
}

function strategy_descriptions() {
    for strategy in "${!STRATEGIES[@]}"; do
        local desc="${STRATEGIES[${strategy}]}"
        echo "    ${strategy}              ${desc}"
    done
}

USAGE="log-write level msg {msg} [-p prefix] [-t type] [-s $(strategies)] [-n] [-c path]"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    User logger (i.e.: ulogger) that logs messages to files and/or stdout based on logger configuration and provided arguments.

    The only arguments required to make a logger call are a log level, -l|--log-level, and a message to log. Log levels can be any of the following:

        * trace - the most verbose, fine grained logging; useful for debugging
        * debug - verbose, fine grained logging; useful for debugging
        * info - messages about normal system operations
        * warn - messages about abnormal, but not necessarily dangerous, system operations
        * error - messages about abnormal, potentially dangerous system operations that are be considered errors

    Messages can optionally be logged w/ a prefix via -p|--prefix (for grouping related log lines), a type via -t|--type (determines the file to which messages are logged),
    and a strategy via -s|--strategy. Strategies determine whether messages are written to a file, to stdout, or both.

USAGE

    ${USAGE}

STRATEGIES

$(strategy_descriptions)

POSITIONAL ARGUMENTS

    MSG                 components of the message to be logged
    LEVEL               the log level of the message; determines which messages get logged to stdout; see log/log-level

OPTIONS

    -p, --prefix        optional; a label w/ which to prefix log messages for enhanced logging granularity
    -t, --type          optional, defaults to "default"; determines the log file to which logs are written; provided types are used to construct paths of the following form:
                        "\${LOG_ROOT}/\${TYPE}.log"; if that file doesn't exist, it will be created
    -s, --strategy      optional, defaults to "normal"; the former sets the "force" strategy; possible values are "normal", "notify", "log", and "force"; determines where/how logs are written
    -c, --config        optional; a path to a file from which to read user ulogger config

FLAGS

    -n, --no-fmt        if present, the log line won't be formatted w/ log level, prefix, date, etc.
    -h, --help          display this message

GLOBALS

    ULOGGER_PREFIX      env var equivalent of -p|--prefix
    ULOGGER_STRATEGY    env var equivalent of -s|--strategy
    ULOGG_TYPE          env var equivalent of -t|--type
    ULOGGER_VERBOSE     env var equivalent of -v|--verbose
help
}


MSGS=""
LOG_LINE=""
OUT_LINE=""
LOG_LEVEL=""
PREFIX=""
STRATEGY="NORMAL"
NO_FMT=""
CONFIG_PATH=""

process_positional() {
    if [[ -z "${LOG_LEVEL}" ]]; then
        LOG_LEVEL="$(to_upper "${1}")"
        log-level "${LOG_LEVEL}" -v || exit 1
    else
      MSGS="$([[ -z "${MSGS}" ]] && echo "${1}" || echo "${MSGS} ${1}")"
    fi
}

write_log() {
    echo -e "$*"
}

[[ -n "${ULOGGER_PREFIX+x}" ]] && PREFIX="$(to_upper "${ULOGGER_PREFIX}")"
[[ -n "${ULOGGER_VERBOSE+x}" ]] && [[ "${ULOGGER_VERBOSE}" == "true" ]] && STRATEGY="FORCE"
[[ -n "${ULOGGER_STRATEGY+x}" ]] && STRATEGY="$(to_upper "${ULOGGER_STRATEGY}")"

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--prefix)
      [[ -z "${PREFIX}" ]] && PREFIX="$(to_upper "${2}")" ; shift ; shift ;;
    -t|--type)
      export ULOGGER_TYPE="${2}" ; shift ; shift ;;
    -s|--strategy)
      [[ -z "${STRATEGY}" ]] && STRATEGY="$(to_upper "${2}")" ; shift ; shift ;;
    -n|--no-fmt)
      NO_FMT="true" ; shift ;;
    -c|--config)
      CONFIG_PATH="${2}" ; shift ; shift ;;
    -h|--help)
      help && exit 0 ;;
    *)
      process_positional "${1}" ; shift ;;
  esac
done


# arg validation

if [[ -z "${LOG_LEVEL}" ]]; then
    echo "[ERROR] -l|--log-level is required"
    exit 1
fi

if [[ -z "${STRATEGIES[${STRATEGY}]+x}" ]]; then
    STRATEGIES_STR="$(echo "${!STRATEGIES[*]}" | tr ' ' '|')"
    echo "[ERROR] -s|--strategy must be one of '${STRATEGIES_STR}', not '${STRATEGY}'"
    exit 1
fi

LOG_ROOT="$(log-config -f root -c "${CONFIG_PATH}")"
LOG_DIR="$(log-config -f dir -c "${CONFIG_PATH}")"
LOG_PATH="$(log-config -f path -c "${CONFIG_PATH}")"

# create log dir if it doesn't exist
[[ ! -d "${LOG_ROOT}" ]] && mkdir -p "${LOG_ROOT}"
# create log file's parent dir, if it doesn't exist
[[ ! -d "${LOG_DIR}" ]] && mkdir -p "${LOG_DIR}"
# create log file if it doesn't exist
[[ ! -f "${LOG_PATH}" ]] && touch "${LOG_PATH}"

if [[ "${MSGS}" == "-" ]]; then
    # shellcheck disable=SC2119
    TMP_FILE="$(file::read)"
    MSGS="$(cat "${TMP_FILE}")"
fi

LOG_LINE="${MSGS}"
OUT_LINE="${MSGS}"

# format log line, if necessary
if [[ -z "${NO_FMT}" ]]; then
    LEVEL="$(str::right_pad "[${LOG_LEVEL}]" 8)"
    PREFIX="$([[ -n "${PREFIX}" ]] && echo "[$(to_upper "${PREFIX}")] " || echo "")"
    LOG_LINE="${LEVEL}${PREFIX}${LOG_LINE} ($(date))"
    OUT_LINE="${LEVEL}${OUT_LINE}"
fi

# write to log file, if necessary
if [[ "${STRATEGY}" != "NOTIFY" ]]; then
    write_log "${LOG_LINE}" >> "${LOG_PATH}"
fi

{ log-level "${LOG_LEVEL}"; ERR="$?"; } || true

# propagate unexpected error
if [[ ${ERR} -eq 2 ]]; then
    exit 1
# write to stdout, if necessary
elif [[ "${STRATEGY}" == "NORMAL" ]] && [[ "${ERR}" -eq 0 ]]; then
    write_log "${OUT_LINE}"
elif [[ "${STRATEGY}" == "FORCE" ]] || [[ "${STRATEGY}" == "NOTIFY" ]]; then
    write_log "${OUT_LINE}"
fi

