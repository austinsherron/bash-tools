#!/usr/bin/env bash

set -Eeuo pipefail


# TODO: create a config schema and a fully defined example config.

declare -A QUERY_TYPES=([default]=1 [user]=1)
declare -A FIELDS=(
    [level]="the current log level, considering type specific overrides"
    [path]="the log file path, considering type specific config"
    [dir]="the log file parent dir, considering type specific config"
    [root]="the global log root dir"
    [type]="the current logger type, which informs configuration "
    [config]="the path to the current user defined logger config file"
)

declare -A FIELD_ACTIONS=(
    [level]="__get_level"
    [path]="__get_path"
    [dir]="__get_dir"
    [type]="__get_type"
    [root]="__get_root"
    [config]="__get_config"
)

function __fields() {
    local sep="${1:-|}"
    echo "${!FIELDS[@]}" | tr " " "${sep}"
}

function __field_descriptions() {
    for field in "${!FIELDS[@]}"; do
        echo "       * ${field} - ${FIELDS[${field}]}"
    done
}

function __query_types() {
    echo "${!QUERY_TYPES[@]}" | tr " " "|"
}

USAGE="log-config [-f field] [-q $(__query_types)] [-t type] [-c path]"

usage() {
    echo "${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Reads configuration for ulogger. By default, configuration is sourced from \${XDG_CONFIG_HOME}/ulogger/config.toml, but a path to a config file can be explicitly passed via -c|--config.
    Required configuration values have the following defaults:

        * root = "\${HOME}/.local/state/logs" - can be set via \$LOG_ROOT
        * type.default = "default" - can be set via \$DEFAULT_LOG_TYPE
        * level.current = "WARN" - can be set via \$CURRENT_LOG_LEVEL
        * level.default = "WARN" - can be set via \$DEFAULT_LOG_LEVEL
        * path.default = "default.log" - derived from type.default, if not set

    Config fields available for reading via -f include:

$(__field_descriptions)

USAGE

    ${USAGE}

OPTIONS

    -f, --field     optional, required if -q|--query isn't specified; the field to read from config; valid values: $(__fields ", ")
    -q, --query     optional, required if -f|--field isn't specified; writes to stdout the config block of the provided type; valid values: $(__query_types ", ")
    -t, --type      optional; the logger type for which config is being read; can also be specified via $\ULOGGER_TYPE
    -c, --config    optional; a path to a file from which to read user ulogger config
    -h, --help      optional; display this message
help
}


FIELD=""
QUERY=""
TYPE=""
EDIT=""

CONFIG_PATH="${XDG_CONFIG_HOME}/ulogger/config.toml"
DEFAULT_CONFIG_PATH="${TOOLS_ROOT}/log/config/default.toml"

[[ -n "${ULOGGER_TYPE+x}" ]] && TYPE="${ULOGGER_TYPE}"

while [[ $# -gt 0 ]]; do
  case $1 in
    -f|--field)
      FIELD="${2}"
      shift
      shift
      ;;
    -t|--type)
      TYPE="${2}"
      shift
      shift
      ;;
    -q|--query)
      QUERY="${2}"
      shift
      shift
      ;;
    -c|--config)
      [[ -n "${2}" ]] && CONFIG_PATH="${2}"
      shift
      shift
      ;;
    -e|--edit)
      EDIT="true"
      shift
      ;;
    -h|--help)
      help
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done


function __get_log_level_from_env() {
    if [[ -n "${CURRENT_LOG_LEVEL+x}" ]]; then
        echo "${CURRENT_LOG_LEVEL}"
    elif [[ -n "${DEFAULT_LOG_LEVEL+x}" ]]; then
        echo "${DEFAULT_LOG_LEVEL}"
    else
        echo ""
    fi
}

function __get_default_type_from_env() {
    [[ -n "${DEFAULT_LOG_TYPE+x}" ]] && echo "${DEFAULT_LOG_TYPE}" || echo ""
}

function __get_user_config() {
    tq "${CONFIG_PATH}" -s | jq
}

function __get_default_config() {
    tq "${DEFAULT_CONFIG_PATH}" -s | jq
}

function __get_from_config_file() {
    local path="${1}"
    shift

    tq "${path}" "$@" -s | xargs
}

function __get_from_default_config() {
    local field="${1}"
    __get_from_config_file "${DEFAULT_CONFIG_PATH}" "${field}"
}

function __get_from_user_config() {
    local field="${1}"
    __get_from_config_file "${CONFIG_PATH}" "${field}"
}

function __get_from_config() {
    local field="${1}"
    local -r value="$(__get_from_user_config "${field}")"

    if [[ -z "${value}" ]]; then
        __get_from_default_config "${field}"
    else
        echo "${value}"
    fi
}

function __log_root() {
    local log_root=""

    [[ -z "${log_root}" ]] && log_root="$(__get_from_config .root)"
    [[ -z "${log_root}" ]] && log_root="${LOG_ROOT:-}"
    [[ -n "${log_root}" ]] && echo "${log_root}" && return 0

    echo "[ERROR] unable to determine log root from config" && exit 1
}

function __default_type() {
    local -r default_type="$(__get_from_config .type)"
    [[ -z "${default_type}" ]] && __get_default_type_from_env
    echo "${default_type}"
}

function __get_log_type() {
    [[ -n "${TYPE}" ]] && echo "${TYPE}" && return 0

    local -r type="$(__default_type)"
    [[ -n "${type}" ]] && echo "${type}" && return 0

    echo "[ERROR] unable to determine logger type from config" && exit 1
}

function __current_log_level() {
    local type
    local level

    type="$(__get_log_type)"
    level="$(__get_from_config ."${type}.level")"

    [[ -z "${level}" ]] && level="$(__get_from_config .level.current)"
    [[ -z "${level}" ]] && level="$(__get_from_config .level.default)"
    [[ -z "${level}" ]] && level="$(__get_log_level_from_env)"
    [[ -n "${level}" ]] && echo "${level}" && return 0

    echo "[ERROR] unable to determine current log level from config" && exit 1
}

function __get_type_root() {
    local type="${1}"
    __get_from_config ".${type}.directory"
}

function __get_type_file() {
    local type="${1}"
    local -r ext="$(__get_from_config ".${type}.extension")"
    local -r type_file="$(__get_from_config ".${type}.file")"
    echo "${type_file:-${type}}.${ext:-log}"
}

function __make_path() {
    local path=""

    [[ $# -ge 1 ]] && path="${1}" && shift

    while [[ $# -gt 0 ]]; do
        [[ -n "${1}" ]] && path="${path}/${1}" ; shift
    done

    echo "${path}"
}

function __get_type_dir_path() {
    local type="${1:-}"
    local path_parts=()

    [[ -z "${type}" ]] && type="$(__get_log_type)"
    path_parts+=("$(__log_root)")
    path_parts+=("$(__get_type_root "${type}")")

    __make_path "${path_parts[@]}"
}

function __get_full_type_path() {
    local type
    type="$(__get_log_type)"

    local path_parts=()
    path_parts+=("$(__get_type_dir_path "${type}")")
    path_parts+=("$(__get_type_file "${type}")")

    __make_path "${path_parts[@]}"
}

function __handle_query() {
    if [[ -z "${!QUERY_TYPES[${QUERY}]}" ]]; then
        echo "-q|--query must be one of '$(__query_types)' not '${QUERY}'"
        return 1
    fi

    eval "__get_${QUERY}_config" || return 1
}

function __get_level() { __current_log_level ; }
function __get_path() { __get_full_type_path ; }
function __get_dir() { __get_type_dir_path ; }
function __get_root() { __log_root ; }
function __get_type() { __get_log_type ; }
function __get_config() { echo "${CONFIG_PATH}" ; }

function __handle_field() {
    if [[ -z "${FIELDS[${FIELD}]+x}" ]]; then
        echo "-f|--field (${FIELD}) is not a valid field"
        return 1
    fi

    "${FIELD_ACTIONS[${FIELD}]}" || return 1
}

if [[ ! -s "${CONFIG_PATH}" ]]; then
    echo "[ERROR] -c|--config path must refer to a valid file"
fi

if [[ -n "${EDIT}" ]]; then
    ${EDITOR} "${CONFIG_PATH}"
elif [[ -n "${QUERY}" ]]; then
    __handle_query || exit 1
elif [[ -n "${FIELD}" ]]; then
    __handle_field || exit 1
else
    echo "[ERROR] one of -f|--field or -q|--query is required" && exit 1
fi

