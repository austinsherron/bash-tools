#!/usr/bin/env bash

set -Eeuo pipefail

source "${BASH_LIB}/args/validate.sh"
source "${BASH_LIB}/core/str.sh"
source "${BASH_LIB}/log/utils.sh"
source "${BASH_LIB}/utils/sys.sh"


declare -A CMD_DESCRIPTIONS=(
    [check]="checks if -p|--pkg is installed"
    [info]="displays information about -p|--pkg"
    [search]="searches for -p|--pkg"
    [install]="installs -p|--pkg"
    [update]="maps to 'upgrade'"
    [remove]="removes -p|--pkg"
)

function cmds() {
    local sep="${1:-|}"
    str::join "${sep}" "${!CMD_DESCRIPTIONS[@]}"
}

function cmd_descriptions() {
    for cmd in "${!CMD_DESCRIPTIONS[@]}"; do
        echo "    ${cmd}           ${CMD_DESCRIPTIONS[${cmd}]}"
    done
}

USAGE="pkgmgr [cmd] {brew-args} [-p pkg] [-s script {--script-arg [arg]}] {flags}"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    Central entry point for basic interactions w/ packages for a darwin system via brew. Can also used be to run installation scripts in "\${SCRIPTS_ROOT}/install/darwin|generic"
    w/ --script.

    Packages are installed only if they aren't already, unless -f|--force is provided. Similarly, packages are only updated/removed if they already exist in the system.

    Note: intended for use w/ darwin based systems.

USAGE

    ${USAGE}

COMMANDS

$(cmd_descriptions)

POSITIONAL ARGUMENTS

    CMD                 optional, defaults to "install"; the cmd to run
    ARGS                optional; arbitrary params/args to pass directly to brew; WARN: cmd must be specified (can't use defaulting) if using wildcard arguments

OPTIONS

    -p, --pkg           optional if -s|--script or -t|--tap is used; the name of the package on which to perform an action
    -t, --tap           optional; indicates that the provided "repo" should be tapped
    -m, --mgr           optional; exists primarily to make the pkgmgr api consistent
    -s, --script        optional; the name of a script in "\${SCRIPTS_ROOT}/install/[os]|generic" to run; if provided, all params except -v|--verbose and -d|--dry-run will be ignored

FLAGS

    -c, --cask          if provided, indicates that -p|--pkg should be treated as a cask
    -f, --force         if provided, install command will be executed even if package is already installed
    -d, --dry-run       if present, no state changes are made
    -h, --help          display this message
help
}

declare -A CMDS=(
    [check]="check"
    [info]="info"
    [install]="install"
    [update]="upgrade"
    [remove]="remove"
    [search]="search"
)

declare -A INSTALLED_CMDS=([update]="upgrade" [remove]="remove")

PKG=""
CASK=""
TAP=""
CMD=""
ARGS=()
FORCE=""
SCRIPT=""
DRY_RUN=""
INSTALLED=1

[[ -z "${ULOGGER_TYPE+x}" ]] && export ULOGGER_TYPE="pkg"
export ULOGGER_PREFIX="${CMD}"

if ! sys::is_darwin; then
    ulogger error "darwin-pkgmgr can only be used on darwin systems"
    exit 1
fi

function handle_tap() {
    ulogger info "tapping ${TAP}"
    [[ "${DRY_RUN}" == "true" ]] && return 0
    brew tap "${TAP}" || return 1
}

function search_pkg() {
    brew search "${PKG}" && return 0 || return 1
}

function check_pkg() {
    local cmd=("brew" "list" "${PKG}")
    local is_cask="no"

    if [[ -n "${CASK}" ]]; then
        is_cask="yes"
        cmd+=("--cask")
    fi

    ulogger debug "checking brew for pkg=${PKG} (cask? ${is_cask})"
    "${cmd[@]}" &> /dev/null && return 0 || return 1
}

function process_cmd() {
    local cmd=("brew" "${CMDS[${CMD}]}" "${PKG}")

    [[ -n "${CASK}" ]] && cmd+=("--cask")
    [[ ${#ARGS[@]} -gt 0 ]] && cmd+=("${ARGS[@]}")

    ulogger debug "running '${cmd[*]}'"
    [[ "${DRY_RUN}" == "true" ]] && return 0

    "${cmd[@]}" || return 1
}

function run_script() {
    # NOTE: if we're here, it should be safe to assume this path (i.e.: darwin scripts)
    local script_path="${SCRIPTS_ROOT}/install/darwin/${SCRIPT}.sh"

    if [[ ! -f "${script_path}" ]]; then
        ulogger debug "script=${script_path} doesn't exist; falling back to os-agnostic path"
        script_path="${SCRIPTS_ROOT}/install/generic/${SCRIPT}.sh"
        [[ ! -f "${script_path}" ]] && ulogger error "os-agnostic script=${script_path} doesn't exist" && return 1
    fi

    ulogger debug "running script=${script_path} w/ args=${ARGS[*]}"
    [[ -z "${DRY_RUN}" ]] && return 0

    "${script_path}" "${ARGS[@]}" || return 1
}

function process_positional() {
    local arg="${1}"

    if [[ -z "${CMD}" ]]; then
        CMD="${arg}"
    else
        ARGS+=("${arg}")
    fi
}

LogFlags::process_log_flags "$@"

while [[ $# -gt 0 ]]; do
  case "${1}" in
    -p|--pkg)
      PKG="${2}" ; shift ; shift ;;
    -c|--cask)
      CASK="true" ; shift ;;
    -t|--tap)
      TAP="${2}" ; shift ; shift ;;
    -f|--force)
      FORCE="true" ; shift ;;
    -s|--script)
      SCRIPT="${2}" ; shift ; shift ;;
    -d|--dry-run)
      DRY_RUN="true" ; shift ;;
    -v*|-q*)
      shift ;;
    -h|--help)
      help && exit 0 ;;
    -m|--mgr)
      shift ; shift ;;
     *)
      process_positional "${1}" ; shift ;;
  esac
done


validate_at_least_one "-p|--pkg" "${PKG}" "-t|--tap" "${TAP}" "-s|--script" "${SCRIPT}" || exit 1
validate_only_one "-p|--pkg" "${PKG}" "-t|--tap" "${TAP}" "-s|--script" "${SCRIPT}" || exit 1

if [[ -n "${SCRIPT}" ]]; then
    run_script ; exit $?
elif [[ -n "${TAP}" ]]; then
    handle_tap && exit 0 || exit 1
fi

[[ -z "${CMD}" ]] && CMD="install"
validate_one_of "cmd" "${CMD}" "${!CMDS[@]}" || exit 1

if [[ "${CMD}" == "search" ]]; then
    search_pkg ; exit $?
fi

check_pkg && INSTALLED=0
[[ "${CMD}" == "check" ]] && exit "${INSTALLED}"

if [[ ${INSTALLED} -eq 0 ]] && [[ "${CMD}" == "install" ]]; then
    ulogger debug "${PKG} is already installed"
    [[ -z "${FORCE}" ]] && exit 0
    ulogger warn "-f|--force option detected; forcing install"
elif [[ ${INSTALLED} -eq 1 ]] && [[ -n "${INSTALLED_CMDS["${CMD}"]+x}" ]]; then
    ulogger error "${CMD} cmd not valid for package that isn't installed"
    exit 1
fi

process_cmd

