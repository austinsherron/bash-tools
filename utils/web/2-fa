#!/usr/bin/env bash

set -Eeuo pipefail


USAGE="2-fa [-v] [-c path] [-m path] 2FA_SOURCE_KEY"

usage() {
    echo "usage: ${USAGE}"
}

help() {
cat <<help
DESCRIPTION

    A script that handles the details of decrypting and extracting tokens from PGP encrypted 2-FA messages. 2-FA messages must be from known sources wit2h configuration 
    entries in this script's config file. The default location of the aforementioned config file is "${HOME}/.config/2-fa", and is a CSV of the form:

        2-FA source key,2-FA extraction type,2-FA token identifier

    2-FA extraction types specifiy how tokens are extracted from messages. Valid extraction types are:

        * line - extract a line "n" from 2-FA messages, where the 2-FA token identifier is "n"
        * pattern - extract the first line that contains "pattern", where the 2-FA token identifier is "pattern" (pattern is removed from the matching line)

    The 2-FA message to be decrypted can read via -m|--message or the clipboard.

USAGE

    ${USAGE}

POSITIONAL ARGUMENTS

    2FA_SOURCE      a key that maps to a configured 2-FA source

OPTIONS

    -c, --config    an optional path to a 2-FA config file
    -m, --message   an optional path to an encrypted 2-FA message
    -v, --verbose   when specified, the token will be sent to stdout as well as 
                    to the clipboard
    -h, --help      print this message
help
}


VERBOSE=""

CONFIG_PATH="${HOME}/.config/2-fa"
MSG_PATH=""

MSG_CONTENT=""
TWO_FA_SRC=""
TOKEN_IDENTIFIER=""

__get_extraction_type() {
    grep "^${TWO_FA_SRC}," "${CONFIG_PATH}" | awk -F "," '{print $2}' || true
}

__get_token_identifier() {
    grep "^${TWO_FA_SRC}," "${CONFIG_PATH}" | awk -F "," '{print $3}' || true 
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--config)
      CONFIG_PATH="${2}"
      shift
      shift
      ;;
    -m|--message)
      MSG_PATH="${2}"
      shift
      shift
      ;;
    -v|--verbose)
      VERBOSE="true"
      shift
      ;;
    -h|--help)
      help
      exit 0
      ;;
    -*)
      usage
      exit 1
      ;;
     *)
      TWO_FA_SRC="${1}"
      shift
      ;;
  esac
done

if [[ -z "${TWO_FA_SRC}" ]]; then
    usage
    exit 1
fi 

MSG_CONTENT="$([[ -n "${MSG_PATH}" && -s "${MSG_PATH}" ]] && cat "${MSG_PATH}" || xsel --clipboard)"

if [[ -z "${MSG_CONTENT}" ]]; then
    SRC_MOD="$([[ -n "${MSG_PATH}" ]] && echo "${MSG_PATH} doesn't exist/is empty and " || echo "")"
    echo "[ERROR] no 2-FA message to decrypt: ${SRC_MOD}your clipboard is empty"
    exit 1
fi

TOKEN_EXTRACTION_TYPE="$(__get_extraction_type)"

if [[ -z "${TOKEN_EXTRACTION_TYPE}" ]]; then
    echo "[ERROR] unable to find 2-FA token extraction type for \"${TWO_FA_SRC}\" in \"${CONFIG_PATH}\""
    exit 1
fi

TOKEN_IDENTIFIER="$(__get_token_identifier)"

if [[ -z "${TOKEN_IDENTIFIER}" ]]; then
    echo "[ERROR] unable to find 2-FA token identifier for \"${TWO_FA_SRC}\" in \"${CONFIG_PATH}\""
    exit 1
fi

TOKEN=""

[[ "${VERBOSE}" == "true" ]] && echo "[INFO] 2-FA extraction type=${TOKEN_EXTRACTION_TYPE}, token identifier=${TOKEN_IDENTIFIER}"

if [[ "${TOKEN_EXTRACTION_TYPE}" == "line" ]]; then
    TOKEN="$(echo "${MSG_CONTENT}" | gpg -d | sed "${TOKEN_IDENTIFIER}q;d")"
elif [[ "${TOKEN_EXTRACTION_TYPE}" == "pattern" ]]; then
    TOKEN="$("${MSG_CONTENT}" | gpg -d | grep "${TOKEN_IDENTIFIER}" | sed "s/${TOKEN_IDENTIFIER}//" | xargs)"
else
    echo "[ERROR] unrecognized 2-FA token extraction type: ${TOKEN_EXTRACTION_TYPE}"
    exit 1
fi

[[ "${VERBOSE}" == "true" ]] && echo "[INFO] token='${TOKEN}'"
echo "${TOKEN}" | xsel --clipboard

